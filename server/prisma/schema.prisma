generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum Make {
  Acura
  AlfaRomeo
  AstonMartin
  Audi
  Bentley
  BMW
  Bugatti
  Buick
  Cadillac
  Chevrolet
  Chrysler
  Citroen
  Dodge
  Ferrari
  Fiat
  Ford
  Genesis
  Gmc
  Honda
  Hyundai
  Infiniti
  Jaguar
  Jeep
  Kia
  Koenigsegg
  Lamborghini
  LandRover
  Lexus
  Lincoln
  Lotus
  Maserati
  Maybach
  Mazda
  Mclaren
  MercedesBenz
  Mini
  Mitsubishi
  Nissan
  Pagani
  Peugeot
  Porsche
  Ram
  Renault
  RollsRoyce
  Saab
  Subaru
  Suzuki
  Tesla
  Toyota
  Volkswagen
  Volvo
}

enum Type {
  Sedan
  Coupe
  Hatchback
  SUV
  Truck
  Convertible
  Wagon
  Minivan
  Sportscar
  Crossover
  Roadster
  Luxury
  Electric
  Hybrid
  Diesel
  CrossoverSUV
  Van
}

enum Fuel {
  Petrol
  Diesel
  Hybrid
  Electric
  Ethanol
  Unleaded
  E10
  PremiumUnleaded95
  PremiumUnleaded98
  Biofuels
  E85
  Hydrogen
  NaturalGas
  Biodiesel
  LPG
}

enum Drive {
  FWD
  AWD
  RWD
  FourWD
}

enum Transmission {
  Manual
  Automatic
  SemiAutomatic
  CVT
  DualClutch
  Tiptronic
  STronic
  SevenSpeedAutomatic
  SixSpeedAutomatic
  EightSpeedAutomatic
}

enum OrderStatus {
  Pending
  Declined
  Confirmed
  Paid
}

enum EnquiryStatus {
  Pending
  Accepted
  Declined
}

enum PaymentMethod {
  Cash
  CreditCard
  DebitCard
  Paypal
  BankTransfer
  Bitcoin
  ApplePay
  GooglePay
}

enum PaymentStatus {
  Pending
  Paid
  Declined
}

enum PreferredContactMethod {
  Email
  Phone
  All
}

model User {
  id                     Int                    @id @default(autoincrement())
  cognitoId              String                 @unique
  locationId             Int?
  firstName              String                 @default("")
  lastName               String                 @default("")
  email                  String
  phone                  String                 @default("")
  avatarUrl              String                 @default("")
  preferredContactMethod PreferredContactMethod @default(Email)
  isProfileSetup         Boolean                @default(false)
  dateTimeCreated        DateTime               @default(now())
  dateTimeUpdated        DateTime               @default(now()) @updatedAt

  favourites SellCar[] @relation("UserFavourites")
  carSales   SellCar[]
  orders     Order[]
  reviews    Review[]  @relation("UserReview")
  reviewer   Review[]  @relation("ReviewerReview")
  location   Location? @relation(fields: [locationId], references: [id])
  enquiries  Enquiry[]
}

model Location {
  id              Int      @id @default(autoincrement())
  address         String
  city            String
  state           String
  country         String
  postalCode      String
  dateTimeCreated DateTime @default(now())
  dateTimeUpdated DateTime @default(now()) @updatedAt

  coordinates Unsupported("geography(Point, 4326)")
  users       User[]
}

model Car {
  id              Int          @id @default(autoincrement())
  make            Make
  model           String
  year            Int
  type            Type
  fuel            Fuel
  drive           Drive
  transmission    Transmission
  dateTimeCreated DateTime     @default(now())
  dateTimeUpdated DateTime     @default(now()) @updatedAt

  sellCars SellCar[]

  @@unique([make, model, year, type, fuel, drive, transmission])
}

model SellCar {
  id              Int      @id @default(autoincrement())
  vin             String   @unique @db.VarChar(17)
  sellerCognitoId String
  carId           Int
  mileage         Int
  price           Float
  photoUrls       String[]
  description     String
  isPublic        Boolean  @default(false)
  dateTimeCreated DateTime @default(now())
  dateTimeUpdated DateTime @default(now()) @updatedAt

  enquiries    Enquiry[]
  order        Order?
  favouritedBy User[]    @relation("UserFavourites")
  seller       User      @relation(fields: [sellerCognitoId], references: [cognitoId])
  car          Car       @relation(fields: [carId], references: [id])
}

model Enquiry {
  id              Int           @id @default(autoincrement())
  referenceCode   String        @unique
  sellCarId       Int
  buyerCognitoId  String
  offer           Float
  listPrice       Float
  message         String
  status          EnquiryStatus @default(Pending)
  dateTimeCreated DateTime      @default(now())
  dateTimeUpdated DateTime      @default(now()) @updatedAt

  sellCar SellCar @relation(fields: [sellCarId], references: [id])
  buyer   User    @relation(fields: [buyerCognitoId], references: [cognitoId])

  @@unique(name: "enquiryId", [sellCarId, buyerCognitoId]) // Ensure a user can only make one enquiry per car
}

model Order {
  id              Int         @id @default(autoincrement())
  sellCarId       Int         @unique // Each car can only have one order
  buyerCognitoId  String
  totalAmount     Float
  status          OrderStatus @default(Pending)
  dateTimeCreated DateTime    @default(now())
  dateTimeUpdated DateTime    @default(now()) @updatedAt

  sellCar SellCar  @relation(fields: [sellCarId], references: [id])
  buyer   User     @relation(fields: [buyerCognitoId], references: [cognitoId])
  payment Payment?
}

model Payment {
  id              Int           @id @default(autoincrement())
  orderId         Int           @unique
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(Pending)
  amount          Float
  dateTimeCreated DateTime      @default(now())
  dateTimeUpdated DateTime      @default(now()) @updatedAt

  order Order @relation(fields: [orderId], references: [id])
}

model Review {
  id                Int      @id @default(autoincrement())
  userCognitoId     String
  reviewerCognitoId String
  rating            Int      @default(0)
  comment           String
  dateTimeCreated   DateTime @default(now())
  dateTimeUpdated   DateTime @default(now()) @updatedAt

  user     User @relation("UserReview", fields: [userCognitoId], references: [cognitoId])
  reviewer User @relation("ReviewerReview", fields: [reviewerCognitoId], references: [cognitoId])
}
