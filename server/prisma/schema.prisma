generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum CarType {
  Sedan
  Coupe
  Hatchback
  Suv
  Truck
  Convertible
  Wagon
  Minivan
  Sportscar
  Crossover
  Roadster
  Luxury
  Electric
  Hybrid
  Diesel
  CrossoverSuv
  Van
}

enum Fuel {
  Petrol
  Diesel
  Hybrid
  Electric
  Ethanol
  Unleaded
  E10
  PremiumUnleaded95
  PremiumUnleaded98
  Biofuels
  E85
  Hydrogen
  NaturalGas
  Biodiesel
  LPG
}

enum Drive {
  FWD
  AWD
  RWD
  FourWD
}

enum Transmission {
  Manual
  Automatic
  SemiAutomatic
  CVT
  DualClutch
  Tiptronic
  STronic
  SevenSpeedAutomatic
  SixSpeedAutomatic
  EightSpeedAutomatic
}

enum OrderStatus {
  Pending
  Denied
  Confirmed
  Paid
}

enum PaymentMethod {
  Cash
  CreditCard
  DebitCard
  Paypal
  BankTransfer
  Bitcoin
  ApplePay
  GooglePay
}

enum PaymentStatus {
  Pending
  Paid
  Denied
}

model User {
  id              Int      @id @default(autoincrement())
  cognitoId       String   @unique
  locationId      Int?
  firstName       String
  lastName        String
  email           String
  phone           String
  dateTimeCreated DateTime @default(now())
  dateTimeUpdated DateTime @default(now()) @updatedAt

  favourites SaleCar[] @relation("UserFavourites")
  carSales   SaleCar[]
  orders     Order[]
  reviews    Review[]  @relation("UserReview")
  reviewer   Review[]  @relation("ReviewerReview")
  location   Location? @relation(fields: [locationId], references: [id])
}

model Location {
  id              Int      @id @default(autoincrement())
  address         String
  city            String
  state           String
  country         String
  postalCode      String
  dateTimeCreated DateTime @default(now())
  dateTimeUpdated DateTime @default(now()) @updatedAt

  coordinates Unsupported("geography(Point, 4326)")
  Users       User[]
}

model Car {
  id              Int          @id @default(autoincrement())
  make            String
  model           String
  year            Int
  type            String
  fuel            Fuel
  horsePower      Int
  drive           Drive
  transmission    Transmission
  dateTimeCreated DateTime     @default(now())
  dateTimeUpdated DateTime     @default(now()) @updatedAt

  carSales SaleCar[]
}

model SaleCar {
  id              Int      @id @default(autoincrement())
  vin             String   @unique
  sellerCognitoId String
  carId           Int
  mileage         Int
  price           Float
  photoUrls       String[]
  description     String
  dateTimeCreated DateTime @default(now())
  dateTimeUpdated DateTime @default(now()) @updatedAt

  order        Order?
  favouritedBy User[] @relation("UserFavourites")
  seller       User   @relation(fields: [sellerCognitoId], references: [cognitoId])
  car          Car    @relation(fields: [carId], references: [id])
}

model Order {
  id              Int         @id @default(autoincrement())
  saleCarId       Int         @unique
  buyerCognitoId  String
  totalAmount     Float
  status          OrderStatus
  dateTimeCreated DateTime    @default(now())
  dateTimeUpdated DateTime    @default(now()) @updatedAt

  saleCar SaleCar  @relation(fields: [saleCarId], references: [id])
  buyer   User     @relation(fields: [buyerCognitoId], references: [cognitoId])
  payment Payment?
}

model Payment {
  id              Int           @id @default(autoincrement())
  orderId         Int           @unique
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus
  amount          Float
  dateTimeCreated DateTime      @default(now())
  dateTimeUpdated DateTime      @default(now()) @updatedAt

  order Order @relation(fields: [orderId], references: [id])
}

model Review {
  id                Int      @id @default(autoincrement())
  userCognitoId     String
  reviewerCognitoId String
  rating            Int      @default(0)
  comment           String
  dateTimeCreated   DateTime @default(now())
  dateTimeUpdated   DateTime @default(now()) @updatedAt

  user     User @relation("UserReview", fields: [userCognitoId], references: [cognitoId])
  reviewer User @relation("ReviewerReview", fields: [reviewerCognitoId], references: [cognitoId])
}
